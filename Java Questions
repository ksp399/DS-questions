https://www.geeksforgeeks.org/introduction-of-process-synchronization/amp/
https://www.geeksforgeeks.org/difference-between-compile-time-and-run-time-polymorphism-in-java/
https://www.geeksforgeeks.org/horizontal-and-vertical-scaling-in-databases/
Why jvm calls main function directly without creating class instance?
Why is java platform independent?
Make immutable class object in java.



https://www.youtube.com/watch?v=UnaNQgzw4zY
https://www.youtube.com/watch?v=7TOmdDJc14s

https://stackoverflow.com/questions/15400508/string-concatenation-complexity-in-c-and-java#:~:text=a%20comment!!)-,On%20each%20concatenation%20a%20new%20copy%20of%20the%20string%20is,are%20the%20respective%20String%20lengths.
https://www.youtube.com/watch?v=7CwmelNxxBI&ab_channel=AnujBhaiyaJavaCourse

https://www.geeksforgeeks.org/difference-between-callable-and-runnable-in-java/
https://www.javatpoint.com/solid-principles-java
https://www.javatpoint.com/final-keyword
https://www.geeksforgeeks.org/jvm-works-jvm-architecture/
https://www.javatpoint.com/difference-between-jdk-jre-and-jvm
https://www.javatpoint.com/jvm-java-virtual-machine
https://medium.com/javarevisited/internal-working-of-hashset-in-java-interview-question-129bdd31fc60

https://www.javatpoint.com/working-of-hashmap-in-java
https://www.geeksforgeeks.org/association-composition-aggregation-java/
https://www.geeksforgeeks.org/functional-interfaces-java/
https://www.geeksforgeeks.org/lambda-expressions-java-8/
https://www.geeksforgeeks.org/default-methods-java/
https://www.javatpoint.com/string-pool-in-java
https://www.javatpoint.com/difference-between-abstract-class-and-interface

https://www.geeksforgeeks.org/map-interface-java-examples/
https://www.edureka.co/blog/interview-questions/java-collections-interview-questions/

https://www.geeksforgeeks.org/multithreading-in-java/
https://www.geeksforgeeks.org/difference-between-callable-and-runnable-in-java/
https://www.guru99.com/multithreading-java.html
https://www.geeksforgeeks.org/thread-pools-java/

https://www.javatpoint.com/java-executorservice
https://www.geeksforgeeks.org/java-util-concurrent-executorservice-interface-with-examples/
https://www.geeksforgeeks.org/difference-hashmap-concurrenthashmap/
https://www.geeksforgeeks.org/equals-hashcode-methods-java/
https://www.baeldung.com/java-equals-hashcode-contracts
https://www.geeksforgeeks.org/array-vs-arraylist-in-java/

https://www.javatpoint.com/java-threadlocal-class
https://www.geeksforgeeks.org/producer-consumer-solution-using-threads-java/
https://www.geeksforgeeks.org/association-composition-aggregation-java/
https://stackoverflow.com/questions/8490852/spring-transactional-isolation-propagation
https://www.geeksforgeeks.org/jvm-works-jvm-architecture/



https://stackoverflow.com/questions/25932730/hashmap-with-null-key-and-null-value
https://www.geeksforgeeks.org/parent-and-child-classes-having-same-data-member-in-java/
https://stackoverflow.com/questions/22685930/implementing-two-interfaces-with-two-default-methods-of-the-same-signature-in-ja
https://java2blog.com/how-to-create-immutable-class-in-java/
https://www.javatpoint.com/multiple-catch-block-in-java
https://www.geeksforgeeks.org/difference-between-put-and-patch-request/
https://stackoverflow.com/questions/20198279/constructor-call-must-be-the-first-statement-in-a-constructor
https://medium.com/system-design-blog/consistent-hashing-b9134c8a9062

https://www.geeksforgeeks.org/stream-in-java/                   (create a list of odd and even elements using stream API)

(Question.) Print elements of 2 lists in Java using multithreading using executor service, 2 threads should be created in parallel, both printing elements of their list in async

Answer: 

			public class ListPrintingWithThreads {
			
					public static void main(String[] args) {
							// Create two lists
							List<Integer> list1 = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));
							List<Integer> list2 = new ArrayList<>(Arrays.asList(6, 7, 8, 9, 10));
			
							// Create ExecutorService with two threads
							ExecutorService executorService = Executors.newFixedThreadPool(2);
			
							// Execute tasks for printing elements of both lists simultaneously
							executorService.execute(() -> printList(list1));
							executorService.execute(() -> printList(list2));
			
							// Shutdown ExecutorService
							executorService.shutdown();
					}
			
					// Method to print elements of a list
					private static void printList(List<Integer> list) {
							for (Integer num : list) {
									System.out.println(Thread.currentThread().getName() + ": " + num);
									// Introduce some delay to simulate processing time
									try {
											Thread.sleep(2000); // Adjust as needed
									} catch (InterruptedException e) {
											e.printStackTrace();
									}
							}
					}
			}
