#In the case of binary search trees (BST), Inorder traversal gives nodes in non-decreasing order.
#A min-heap has the property that every node at level ‘n’ stores a value that is less than or equal to that of its children at level ‘n+1’.
#first element of priority queue is root node of min heap.
#https://www.geeksforgeeks.org/type-conversion-java-examples/
# in java '%' operator is not modulus operator , it is remainder :: https://stackoverflow.com/questions/5385024/mod-in-java-produces-negative-numbers

# '2'-'0'  ----> 2 ---which is integer
# key = (char)('a'+j)+String.valueOf(arr[j]); if arr[j] = 7 and j =3 then key = "d7"
# String s="hello";    System.out.println(s.substring(0,2)); //returns he  as a substring ( '[)' )

# Widening (Implicit) Conversion: This conversion occurs when you convert a smaller data type to a larger one, and Java automatically handles it without any explicit casting.
  byte → short → int → long → float → double
  char → int (char will be casted to int)
# Narrowing (Explicit) Conversion: This conversion occurs when you convert a larger data type to a smaller one, and it requires explicit casting. This may result in data loss if the value being converted cannot be represented by the target data type.
  double → float → long → int → char → short → byte

# Incase if we want to MOD answer with M=10^9+7, then if exp is (a+b+c+d)%M, then break it into ((a+b)%M+(c+d)%M)%M

# Random r = new Random();
  int randomInt = rand.nextInt(r); // Generates a random integer between 0 (inclusive) and r (exclusive) -   [0,r)

# Integer[] temp = set.toArray(new Integer[0]);       ----set to Array

#        Arrays.sort(event, (t1, t2) -> {
            if (t1[1]!=t2[1]){
                return Integer.compare(t1[1],t2[1]);
            }else{
                return Integer.compare(t1[0],t2[0]);
            }
         });


#  for (Map.Entry<Integer, Integer> a : map.entrySet()) {
        ArrayList<Integer>elements=new ArrayList<>();
        elements.add(a.getKey());
        elements.add(a.getValue());
        ans.add(elements);
    }

# We can use == operators for reference comparison (address comparison) and .equals() method for content comparison. In simple words, == checks if both objects point to the same memory location whereas .equals() evaluates to the comparison of values in the objects.
# Integer.valueOf() returns an Integer object while Integer.parseInt() returns a primitive int
   
#In Java, there are three types you should use when working with strings: String, StringBuilder, and StringBuffer.
    The main difference related to your question is that Strings are immutable, whereas StringBuilders and StringBuffers are both mutable. This means when you do an operation such as concat or substring, a String would create an entirely new String object and discard the old one for the garbage collector. With StringBuilders and StringBuffers, those methods actually modify the original objects themselves, so you don’t have the extra garbage left over.
    For most programs you’re perfectly fine using String, since the JVM garbage collector will be able to take care of it. If you want to do some heavy lifting, however, let’s move on to StringBuilder and StringBuffer.
    For all practical purposes, StringBuilder is used for serial programs, while StringBuffer is better for multi threaded environments. If you haven’t explored multi threading yet, just use StringBuilder for now, as it’s faster. StringBuffer has some added protections which help thread management, which slow it down just a bit.
 
# In BFS, while putting elements in queue, mark them visited there itself instead of popping them and then marking them visited as multiple elements will be inserted in queue of same state, Eg: https://leetcode.com/problems/coin-change/submissions/1139677785/ 
